
############################ AUTOCONF VARS ###################################

# архитектура на которой будет происходить компиляция
BUILD_SYSTEM:=@build@
BUILD_CPU:=@build_cpu@
BUILD_VENDOR:=@build_vendor@
BUILD_OS:=@build_os@

# архитектура на которой будут запускаться скомпилированные программы
HOST_SYSTEM:=@host@
HOST_CPU:=@host_cpu@
HOST_VENDOR:=@host_vendor@
HOST_OS:=@host_os@

# целевая архитектура компилируемого компилятора
#
# Пояснение: это нужно для компиляции компиляторов, в частности самого gcc,
#   задает архитектуру, для которой будущий (компилируемый) компилятор
#   будет компилировать программы. В большинстве проектов не требуется.
TARGET_SYSTEM:=@target@
TARGET_CPU:=@target_cpu@
TARGET_VENDOR:=@target_vendor@
TARGET_OS:=@target_os@

# архитектура для которой будет собираться deb-пакет.
# сборщик пакетов и компилятор имеют разную терминлогию,
# в скрипте configure мы транслируем HOST_CPU в имя архитектуры которую
# ожидает менеджер пакетов
DEB_ARCH:=@DEB_ARCH@

# configure может снабдить нас дополнительными опциями компилятора
# так же мы можем передавать свои опции компилятора в configure
# через одноименную переменную окружения и они появятся здесь
CXXFLAGS=@CXXFLAGS@

# берем имя компилятора, которое дает нам configure и доплняем его опциями
CXX:=@CXX@ $(CXXFLAGS) -ffunction-sections -I.

LD=@CXX@ -Wl,--gc-sections

LIBS=-lswscale -lavutil -lavformat -lavcodec -lcairo -lnano2 -lstdc++

# можно сделать по аналогии с $(CXX)
AR:=ar
RANLIB:=ranlib

############################### VARS #########################################

# имя нашей программы/библиотеки
PROG_FILENAME=main

# Имя файла deb-пакета
DEB_FILENAME=libffcairo-$(DEB_ARCH).deb

# объектные модули которые пойдут в нашу программу/библиотеку
# просто описываем здесь в крассивом виде, чтобы правила были более понятные
OBJECTS+=obj/main.o

LIBOBJECTS+=obj/ffcimage.o
LIBOBJECTS+=obj/ffcmuxer.o
LIBOBJECTS+=obj/ffcstream.o
LIBOBJECTS+=obj/ffclibav.o

############################# GENERIC RULES ##################################

# .PHONY указывает цели которые не создают файлов.
.PHONY: all install deb clean distclean

# первая цель - главная, она будет запускаться когда цель явно не указана
all: libffcairo.a $(PROG_FILENAME) demo

.PHONY: demo
demo: demo1-text demo2-makevideo

.PHONY: test
test: test5

# установка файлов
# примечение: будем отходить от этой практике, рекомендуется создавать пакет
# и устанавливать через менеджер пакетов.
install: $(PROG_FILENAME)
	# TODO...

# сборка deb-пакетов, просто короткая цель чтобы не вспоминать имя пакета
deb: $(DEB_FILENAME)

# сборка пакета
$(DEB_FILENAME): deb_clean deb_install
	fakeroot dpkg-deb --build deb $(DEB_FILENAME)

.PHONY: deb_install
deb_install: $(PROG_FILENAME)
	mkdir -p deb/usr/include/
	mkdir -p deb/usr/lib/
	mkdir -p deb/usr/share/ffcairo/
	install -m 0644 ffcairo/*.h deb/usr/include/
	install -m 0644 libffcairo.a deb/usr/lib/
	install -m 0644 README deb/usr/share/ffcairo/

$(PROG_FILENAME): $(OBJECTS)
	$(LD) $(OBJECTS) -o $(PROG_FILENAME)

########################## BUILD RULES #######################################

test5: test5-ffc.cpp libffcairo.a
	$(CXX) -o test5 test5-ffc.cpp -L. -lffcairo $(LIBS)

demo1-text: demo1-text.cpp libffcairo.a ffcairo/config.h
	$(CXX) -o demo1-text demo1-text.cpp -L. -lffcairo $(LIBS)

demo2-makevideo: demo2-makevideo.cpp libffcairo.a ffcairo/config.h ffcairo/ffcmuxer.h
	$(CXX) -o demo2-makevideo demo2-makevideo.cpp -L. -lffcairo $(LIBS)

libffcairo.a: $(LIBOBJECTS) ffcairo/config.h
	$(AR) rc libffcairo.a $(LIBOBJECTS)
	$(RANLIB) libffcairo.a

obj/ffcimage.o: ffcairo/ffcimage.cpp ffcairo/ffcimage.h ffcairo/config.h
	$(CXX) -c ffcairo/ffcimage.cpp -o obj/ffcimage.o

obj/ffcmuxer.o: ffcairo/ffcmuxer.cpp ffcairo/ffcmuxer.h ffcairo/config.h
	$(CXX) -c ffcairo/ffcmuxer.cpp -o obj/ffcmuxer.o

obj/ffcstream.o: ffcairo/ffcstream.cpp ffcairo/ffcstream.h ffcairo/config.h
	$(CXX) -c ffcairo/ffcstream.cpp -o obj/ffcstream.o

obj/ffclibav.o: ffcairo/ffclibav.cpp ffcairo/ffclibav.h ffcairo/config.h
	$(CXX) -c ffcairo/ffclibav.cpp -o obj/ffclibav.o

obj/main.o: ffcairo/main.cpp
	$(CXX) -c ffcairo/main.cpp -o obj/main.o

########################### CLEAN RULES ######################################

# полная очистка
distclean: clean deb_clean
	rm -f Makefile $(DEB_FILENAME) $(PROG_FILENAME) deb/DEBIAN/control
	rm -f config.log config.status
	rm -f ffcairo/config.h
	rm -rf autom4te.cache
	rm -rf libffcairo.a main test5
	rm -rf demo1-text demo2-makevideo

# простая очистка, промежуточные файлы, но оставляет целевые
clean:
	rm -f obj/*.o

# зачистка в каталоге deb-пакета
.PHONY: deb_clean
deb_clean:
	rm -rf deb/usr
